#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
os.environ["LC_ALL"] = "C"

import sys
import pisi
import time
import shutil

from buildfarm.config import configuration as conf
from buildfarm import utils
from buildfarm.circledepfinder import SourceDB
import buildfarm.queuemanager as qm

from buildfarm.dependency import DependencyResolver

class UpdatesManager:
    def __init__(self):
        self.new_packages, self.updated_packages = [], []

        self.new = []
        self.removed = []
        self.updated = []

        self.local_url  = utils.get_local_repository_url()      # local work repo
        self.local_git  = utils.get_local_git_repository_url()  # local git copy
        self.__check_diffs()
        
        if self.removed:
            self.__delete_files()
            utils.update_local_repo_index()

    def __check_diffs(self):
        src = {}
        dst = {}
        len_git_path = len(self.local_git)
        len_url_path = len(self.local_url)

        for root, dirs, files in os.walk(self.local_git):
            if root.startswith(os.path.join(self.local_git, ".git")): continue
            for f in files:
                src[os.path.join(root[len_git_path + 1:], f)] = time.ctime(os.path.getmtime(os.path.join(root, f)))
        if ".gitignore" in src: del src[".gitignore"]
        for root, dirs, files in os.walk(self.local_url):
            for f in files:
                dst[os.path.join(root[len_url_path + 1:], f)] = time.ctime(os.path.getmtime(os.path.join(root, f)))
         
        for f in src:
            try:
                if not src[f] == dst[f]: self.updated.append(f)
                del dst[f]
            except KeyError:
                self.new.append(f)
        for f in self.new: del src[f]

        self.removed.extend(sorted(dst.keys()))
    
    def __delete_files(self):
        dirs = []
        for f in self.removed:
            print "Removing file: %s" % os.path.join(self.local_url, f)
            os.remove(os.path.join(self.local_url, f))
            if not os.path.dirname(f) in dirs: dirs.append(os.path.dirname(os.path.join(self.local_url, f)))
        self.__delete_dirs(dirs)
    
    def __delete_dirs(self, paths):
        for path in paths:
            if os.path.isdir(path) and not os.listdir(path):
                print "Removing empty dir: %s" % path
                os.rmdir(path)

    def __copy_files(self, source):
        for f in sorted(eval(source)):
            if not os.path.isdir(os.path.dirname(os.path.join(self.local_url, f))):
                os.makedirs(os.path.dirname(os.path.join(self.local_url, f)))
            print "Copying file: %s to %s" % (f, self.local_url)
            shutil.copy2(os.path.join(self.local_git, f), os.path.join(self.local_url, f))
       
    def get_new_packages(self):
        self.__copy_files("self.new")
        utils.update_local_repo_index()
        return [os.path.join(self.local_url, f) for f in self.new if f.endswith("/pspec.xml")]

    def get_updated_packages(self):
        self.__copy_files("self.updated")
        utils.update_local_repo_index()
        return [os.path.join(self.local_url, f) for f in self.updated if f.endswith("/pspec.xml")]

if __name__ == "__main__":

    options = {"r": False,     # reset queues
               "w": False,     # write to work queue
               "n": False,     # add new packages
               "u": False,     # add updated packages
               "c": False,     # add components to work queue
               "p": False,     # add packages to work queue
               "i": False,     # don't add build dependencies 
               "x": False,     # update local repo index
               "s": False      # skip already compiled packages
               }
    args, options = utils.args_checker(sys.argv[1:], options)
    
    queue = []

    if options["-c"] and options["-p"]:
        print "You have to use -c and -p options separately!"
        sys.exit(1)
    elif (options["-c"] or options["-p"]) and (options["-n"] or options["-u"]):
        print "You cannot use -c or -p options with -n or -n!"
        sys.exit(1)
    elif options["-r"]:
        utils.clean_waitqueue()
        utils.clean_workqueue()

    if options["-n"] or options["-u"]:
        um = UpdatesManager()
        if options["-n"]: queue += um.get_new_packages()
        if options["-u"]: queue += um.get_updated_packages()
    elif options["-x"] or not os.path.isfile(utils.get_path_repo_index()):
        utils.update_local_repo_index()
#        all_pspecs = utils.update_local_repo_index(get_list = True)
#    else:
#        all_pspecs = utils.get_local_repo_pspecs()

    rawIndex = open(utils.get_path_repo_index(), "r").read()
    sourcedb = SourceDB(rawIndex)
    sources = sourcedb.list_specs()

    if options["-c"]:
        found_components = []
    
        component_list = os.popen("find %s -name 'component.xml'" % utils.get_local_repository_url()).read().strip().split("\n")
        for c in component_list:
            try:
                component = pisi.component.Component(c)
            except Exception, e:
                sys.stderr.write("%s\n" % e)
            else:
                if component.name in args:
                    found_components.append(os.path.dirname(c))
                    args.remove(component.name)
                    if not args: break
    
        if args:
            sys.stderr.write("Cannot find component(s):\n- ")
            sys.stderr.write("\n- ".join(args))
            sys.stderr.write("\n")
            sys.exit(1)
        
        for d in found_components:
            queue += os.popen("find %s -name 'pspec.xml'" % d).read().strip().split("\n")

    elif options["-p"]:
        for arg in args:
            source_uri = ""
            if sourcedb.has_spec(arg):
                source_uri = sourcedb.get_surce_uri(arg)
            else:
                try:
                    pkg = sourcedb.pkgtosrc(arg)
                except KeyError:
                    pass
                else:
                    source_uri = sourcedb.get_surce_uri(pkg)
            if source_uri and not source_uri in queue: queue.append(source_uri)

    if not queue:
        print "Empty queue nothing to add. Exit."
        sys.exit(0)

    if not options["-r"]:
        print "Appending %s/waitqueue" % conf.workdir
        with open("%s/waitqueue" % conf.workdir) as f:
            queue += [pspec for pspec in f.read().splitlines() if not pspec in queue]
        print "Appending %s/workqueue" % conf.workdir
        with open("%s/workqueue" % conf.workdir) as f:
            queue += [pspec for pspec in f.read().splitlines() if not pspec in queue]

    sys.stderr.write("Current queue:\n- ")
    sys.stderr.write("\n- ".join(queue))
    sys.stderr.write("\n")

    if not options["-i"]:
        missing_paths = True
        while missing_paths:    
            dr_work = DependencyResolver(queue)   
            missing_paths = []
        
            for pkg in queue:
                src_name = dr_work.get_srcName(pkg)
                if sourcedb.has_spec(src_name):
                    for bd in  sourcedb.get_spec(src_name).source.buildDependencies:
                        dep_src_name = str(sourcedb.pkgtosrc(str(bd).split()[0]))   # split()[0] -> 'tcl-devel version >= 8.6.0'
                        if sourcedb.has_spec(dep_src_name):
                            source_uri = sourcedb.get_surce_uri(dep_src_name)
                            if not source_uri in queue and not source_uri in missing_paths: missing_paths.append(source_uri)
    
            if missing_paths:
                sys.stderr.write("Adding missed build deps:\n- ")
                sys.stderr.write("\n- ".join(missing_paths))
                sys.stderr.write("\n")
                queue.extend(missing_paths)

    if options["-s"]: queue = utils.filter_pspec_list(queue)

    if not options["-w"]:
        print("\n".join(queue))
        sys.exit(0)
    else:
        print "Writing %s/workqueue" % conf.workdir
        open("%s/workqueue" % conf.workdir, "w").write("\n".join(queue))
        utils.clean_waitqueue()

        print "Indexing work queue ..."
        index = utils.Index()
        index.distribution = None
        index.index(queue)    
        indexfile = utils.get_path_work_index()
        index.write(indexfile, sha1sum=False, compress=None, sign=None)
        print "Index file for work queue written to %s\n" % indexfile
