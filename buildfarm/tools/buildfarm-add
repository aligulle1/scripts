#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
os.environ["LC_ALL"] = "C"

import sys
import pisi

from buildfarm.config import configuration as conf
from buildfarm import utils
from buildfarm.circledepfinder import SourceDB

from buildfarm.dependency import DependencyResolver

if __name__ == "__main__":

    options = {"r": False,     # reset queues
               "w": False,     # write to work queue
               "c": False,     # add components to work queue
               "p": False,     # add packages to work queue
               "i": False,     # don't add build dependencies 
               "x": False,     # update local repo index
               "s": False      # skip already compiled packages
               }
    args, options = utils.args_checker(sys.argv[1:], options)
    
    queue = []

    if options["c"] and options["p"]:
        print "You have to use -c and -p options separately!"
        sys.exit(1)
    elif options["r"]:
        utils.clean_waitqueue()
        utils.clean_workqueue()

    if options["x"] or not os.path.isfile(utils.get_path_repo_index()):
        utils.update_local_repo_index()
#        all_pspecs = utils.update_local_repo_index(get_list = True)
#    else:
#        all_pspecs = utils.get_local_repo_pspecs()

    rawIndex = open(utils.get_path_repo_index(), "r").read()
    sourcedb = SourceDB(rawIndex)
    sources = sourcedb.list_specs()

    if options["c"]:
        found_components = []
    
        component_list = os.popen("find %s -name 'component.xml'" % utils.get_local_repository_url()).read().strip().split("\n")
        for c in component_list:
            try:
                component = pisi.component.Component(c)
            except Exception, e:
                sys.stderr.write("%s\n" % e)
            else:
                if component.name in args:
                    found_components.append(os.path.dirname(c))
                    args.remove(component.name)
                    if not args: break
    
        if args:
            sys.stderr.write("Cannot find component(s):\n- ")
            sys.stderr.write("\n- ".join(args))
            sys.stderr.write("\n")
            sys.exit(1)
        
        for d in found_components:
            queue += os.popen("find %s -name 'pspec.xml'" % d).read().strip().split("\n")

    elif options["p"]:
        for arg in args:
            source_uri = ""
            if sourcedb.has_spec(arg):
                source_uri = sourcedb.get_surce_uri(arg)
            else:
                try:
                    pkg = sourcedb.pkgtosrc(arg)
                except KeyError:
                    pass
                else:
                    source_uri = sourcedb.get_surce_uri(pkg)
            if source_uri and not source_uri in queue: queue.append(source_uri)

    if not queue:
        print "Empty queue nothing to add. Exit."
        sys.exit(0)

    if not options["r"]:
        print "Appending %s/waitqueue" % conf.workdir
        with open("%s/waitqueue" % conf.workdir) as f:
            queue += [pspec for pspec in f.read().splitlines() if not pspec in queue]
        print "Appending %s/workqueue" % conf.workdir
        with open("%s/workqueue" % conf.workdir) as f:
            queue += [pspec for pspec in f.read().splitlines() if not pspec in queue]

    sys.stderr.write("Current queue:\n- ")
    sys.stderr.write("\n- ".join(queue))
    sys.stderr.write("\n")

    if not options["i"]:
        missing_paths = True
        while missing_paths:    
            dr_work = DependencyResolver(queue)   
            missing_paths = []
        
            for pkg in queue:
                src_name = dr_work.get_srcName(pkg)
                if sourcedb.has_spec(src_name):
                    for bd in  sourcedb.get_spec(src_name).source.buildDependencies:
                        dep_src_name = str(sourcedb.pkgtosrc(str(bd).split()[0]))   # split()[0] -> 'tcl-devel version >= 8.6.0'
                        if sourcedb.has_spec(dep_src_name):
                            source_uri = sourcedb.get_surce_uri(dep_src_name)
                            if not source_uri in queue and not source_uri in missing_paths: missing_paths.append(source_uri)
    
            if missing_paths:
                sys.stderr.write("Adding missed build deps:\n- ")
                sys.stderr.write("\n- ".join(missing_paths))
                sys.stderr.write("\n")
                queue.extend(missing_paths)

    if options["s"]: queue = utils.filter_pspec_list(queue)

    if not options["w"]:
        print("\n".join(queue))
        sys.exit(0)
    else:
        print "Writing %s/workqueue" % conf.workdir
        open("%s/workqueue" % conf.workdir, "w").write("\n".join(queue))
        utils.clean_waitqueue()

        utils.index_workqueue(queue)